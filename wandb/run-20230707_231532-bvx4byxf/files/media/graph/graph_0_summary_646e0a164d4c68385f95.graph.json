{"format": "torch", "nodes": [{"name": "image_encoder", "id": 140286712753744, "class_name": "ImageEmbedder(\n  (resnet): Sequential(\n    (0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (2): ReLU(inplace=True)\n    (3): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n    (4): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (5): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (6): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (4): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (5): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (7): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n  )\n)", "parameters": [["resnet.0.weight", [64, 3, 7, 7]], ["resnet.1.weight", [64]], ["resnet.1.bias", [64]], ["resnet.4.0.conv1.weight", [64, 64, 1, 1]], ["resnet.4.0.bn1.weight", [64]], ["resnet.4.0.bn1.bias", [64]], ["resnet.4.0.conv2.weight", [64, 64, 3, 3]], ["resnet.4.0.bn2.weight", [64]], ["resnet.4.0.bn2.bias", [64]], ["resnet.4.0.conv3.weight", [256, 64, 1, 1]], ["resnet.4.0.bn3.weight", [256]], ["resnet.4.0.bn3.bias", [256]], ["resnet.4.0.downsample.0.weight", [256, 64, 1, 1]], ["resnet.4.0.downsample.1.weight", [256]], ["resnet.4.0.downsample.1.bias", [256]], ["resnet.4.1.conv1.weight", [64, 256, 1, 1]], ["resnet.4.1.bn1.weight", [64]], ["resnet.4.1.bn1.bias", [64]], ["resnet.4.1.conv2.weight", [64, 64, 3, 3]], ["resnet.4.1.bn2.weight", [64]], ["resnet.4.1.bn2.bias", [64]], ["resnet.4.1.conv3.weight", [256, 64, 1, 1]], ["resnet.4.1.bn3.weight", [256]], ["resnet.4.1.bn3.bias", [256]], ["resnet.4.2.conv1.weight", [64, 256, 1, 1]], ["resnet.4.2.bn1.weight", [64]], ["resnet.4.2.bn1.bias", [64]], ["resnet.4.2.conv2.weight", [64, 64, 3, 3]], ["resnet.4.2.bn2.weight", [64]], ["resnet.4.2.bn2.bias", [64]], ["resnet.4.2.conv3.weight", [256, 64, 1, 1]], ["resnet.4.2.bn3.weight", [256]], ["resnet.4.2.bn3.bias", [256]], ["resnet.5.0.conv1.weight", [128, 256, 1, 1]], ["resnet.5.0.bn1.weight", [128]], ["resnet.5.0.bn1.bias", [128]], ["resnet.5.0.conv2.weight", [128, 128, 3, 3]], ["resnet.5.0.bn2.weight", [128]], ["resnet.5.0.bn2.bias", [128]], ["resnet.5.0.conv3.weight", [512, 128, 1, 1]], ["resnet.5.0.bn3.weight", [512]], ["resnet.5.0.bn3.bias", [512]], ["resnet.5.0.downsample.0.weight", [512, 256, 1, 1]], ["resnet.5.0.downsample.1.weight", [512]], ["resnet.5.0.downsample.1.bias", [512]], ["resnet.5.1.conv1.weight", [128, 512, 1, 1]], ["resnet.5.1.bn1.weight", [128]], ["resnet.5.1.bn1.bias", [128]], ["resnet.5.1.conv2.weight", [128, 128, 3, 3]], ["resnet.5.1.bn2.weight", [128]], ["resnet.5.1.bn2.bias", [128]], ["resnet.5.1.conv3.weight", [512, 128, 1, 1]], ["resnet.5.1.bn3.weight", [512]], ["resnet.5.1.bn3.bias", [512]], ["resnet.5.2.conv1.weight", [128, 512, 1, 1]], ["resnet.5.2.bn1.weight", [128]], ["resnet.5.2.bn1.bias", [128]], ["resnet.5.2.conv2.weight", [128, 128, 3, 3]], ["resnet.5.2.bn2.weight", [128]], ["resnet.5.2.bn2.bias", [128]], ["resnet.5.2.conv3.weight", [512, 128, 1, 1]], ["resnet.5.2.bn3.weight", [512]], ["resnet.5.2.bn3.bias", [512]], ["resnet.5.3.conv1.weight", [128, 512, 1, 1]], ["resnet.5.3.bn1.weight", [128]], ["resnet.5.3.bn1.bias", [128]], ["resnet.5.3.conv2.weight", [128, 128, 3, 3]], ["resnet.5.3.bn2.weight", [128]], ["resnet.5.3.bn2.bias", [128]], ["resnet.5.3.conv3.weight", [512, 128, 1, 1]], ["resnet.5.3.bn3.weight", [512]], ["resnet.5.3.bn3.bias", [512]], ["resnet.6.0.conv1.weight", [256, 512, 1, 1]], ["resnet.6.0.bn1.weight", [256]], ["resnet.6.0.bn1.bias", [256]], ["resnet.6.0.conv2.weight", [256, 256, 3, 3]], ["resnet.6.0.bn2.weight", [256]], ["resnet.6.0.bn2.bias", [256]], ["resnet.6.0.conv3.weight", [1024, 256, 1, 1]], ["resnet.6.0.bn3.weight", [1024]], ["resnet.6.0.bn3.bias", [1024]], ["resnet.6.0.downsample.0.weight", [1024, 512, 1, 1]], ["resnet.6.0.downsample.1.weight", [1024]], ["resnet.6.0.downsample.1.bias", [1024]], ["resnet.6.1.conv1.weight", [256, 1024, 1, 1]], ["resnet.6.1.bn1.weight", [256]], ["resnet.6.1.bn1.bias", [256]], ["resnet.6.1.conv2.weight", [256, 256, 3, 3]], ["resnet.6.1.bn2.weight", [256]], ["resnet.6.1.bn2.bias", [256]], ["resnet.6.1.conv3.weight", [1024, 256, 1, 1]], ["resnet.6.1.bn3.weight", [1024]], ["resnet.6.1.bn3.bias", [1024]], ["resnet.6.2.conv1.weight", [256, 1024, 1, 1]], ["resnet.6.2.bn1.weight", [256]], ["resnet.6.2.bn1.bias", [256]], ["resnet.6.2.conv2.weight", [256, 256, 3, 3]], ["resnet.6.2.bn2.weight", [256]], ["resnet.6.2.bn2.bias", [256]], ["resnet.6.2.conv3.weight", [1024, 256, 1, 1]], ["resnet.6.2.bn3.weight", [1024]], ["resnet.6.2.bn3.bias", [1024]], ["resnet.6.3.conv1.weight", [256, 1024, 1, 1]], ["resnet.6.3.bn1.weight", [256]], ["resnet.6.3.bn1.bias", [256]], ["resnet.6.3.conv2.weight", [256, 256, 3, 3]], ["resnet.6.3.bn2.weight", [256]], ["resnet.6.3.bn2.bias", [256]], ["resnet.6.3.conv3.weight", [1024, 256, 1, 1]], ["resnet.6.3.bn3.weight", [1024]], ["resnet.6.3.bn3.bias", [1024]], ["resnet.6.4.conv1.weight", [256, 1024, 1, 1]], ["resnet.6.4.bn1.weight", [256]], ["resnet.6.4.bn1.bias", [256]], ["resnet.6.4.conv2.weight", [256, 256, 3, 3]], ["resnet.6.4.bn2.weight", [256]], ["resnet.6.4.bn2.bias", [256]], ["resnet.6.4.conv3.weight", [1024, 256, 1, 1]], ["resnet.6.4.bn3.weight", [1024]], ["resnet.6.4.bn3.bias", [1024]], ["resnet.6.5.conv1.weight", [256, 1024, 1, 1]], ["resnet.6.5.bn1.weight", [256]], ["resnet.6.5.bn1.bias", [256]], ["resnet.6.5.conv2.weight", [256, 256, 3, 3]], ["resnet.6.5.bn2.weight", [256]], ["resnet.6.5.bn2.bias", [256]], ["resnet.6.5.conv3.weight", [1024, 256, 1, 1]], ["resnet.6.5.bn3.weight", [1024]], ["resnet.6.5.bn3.bias", [1024]], ["resnet.7.0.conv1.weight", [512, 1024, 1, 1]], ["resnet.7.0.bn1.weight", [512]], ["resnet.7.0.bn1.bias", [512]], ["resnet.7.0.conv2.weight", [512, 512, 3, 3]], ["resnet.7.0.bn2.weight", [512]], ["resnet.7.0.bn2.bias", [512]], ["resnet.7.0.conv3.weight", [2048, 512, 1, 1]], ["resnet.7.0.bn3.weight", [2048]], ["resnet.7.0.bn3.bias", [2048]], ["resnet.7.0.downsample.0.weight", [2048, 1024, 1, 1]], ["resnet.7.0.downsample.1.weight", [2048]], ["resnet.7.0.downsample.1.bias", [2048]], ["resnet.7.1.conv1.weight", [512, 2048, 1, 1]], ["resnet.7.1.bn1.weight", [512]], ["resnet.7.1.bn1.bias", [512]], ["resnet.7.1.conv2.weight", [512, 512, 3, 3]], ["resnet.7.1.bn2.weight", [512]], ["resnet.7.1.bn2.bias", [512]], ["resnet.7.1.conv3.weight", [2048, 512, 1, 1]], ["resnet.7.1.bn3.weight", [2048]], ["resnet.7.1.bn3.bias", [2048]], ["resnet.7.2.conv1.weight", [512, 2048, 1, 1]], ["resnet.7.2.bn1.weight", [512]], ["resnet.7.2.bn1.bias", [512]], ["resnet.7.2.conv2.weight", [512, 512, 3, 3]], ["resnet.7.2.bn2.weight", [512]], ["resnet.7.2.bn2.bias", [512]], ["resnet.7.2.conv3.weight", [2048, 512, 1, 1]], ["resnet.7.2.bn3.weight", [2048]], ["resnet.7.2.bn3.bias", [2048]]], "output_shape": [[2, 2048, 8, 8]], "num_parameters": [9408, 64, 64, 4096, 64, 64, 36864, 64, 64, 16384, 256, 256, 16384, 256, 256, 16384, 64, 64, 36864, 64, 64, 16384, 256, 256, 16384, 64, 64, 36864, 64, 64, 16384, 256, 256, 32768, 128, 128, 147456, 128, 128, 65536, 512, 512, 131072, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 131072, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 524288, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 524288, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 2097152, 2048, 2048, 1048576, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 1048576, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048]}, {"name": "dummy_encoder", "id": 140286713582160, "class_name": "DummyEmbedder(\n  (day_embedding): Linear(in_features=1, out_features=32, bias=True)\n  (week_embedding): Linear(in_features=1, out_features=32, bias=True)\n  (month_embedding): Linear(in_features=1, out_features=32, bias=True)\n  (year_embedding): Linear(in_features=1, out_features=32, bias=True)\n  (dummy_fusion): Linear(in_features=128, out_features=32, bias=True)\n  (dropout): Dropout(p=0.2, inplace=False)\n)", "parameters": [["day_embedding.weight", [32, 1]], ["day_embedding.bias", [32]], ["week_embedding.weight", [32, 1]], ["week_embedding.bias", [32]], ["month_embedding.weight", [32, 1]], ["month_embedding.bias", [32]], ["year_embedding.weight", [32, 1]], ["year_embedding.bias", [32]], ["dummy_fusion.weight", [32, 128]], ["dummy_fusion.bias", [32]]], "output_shape": [[2, 32]], "num_parameters": [32, 32, 32, 32, 32, 32, 32, 32, 4096, 32]}, {"name": "text_encoder", "id": 140286703425744, "class_name": "TextEmbedder(\n  (fc): Linear(in_features=768, out_features=32, bias=True)\n  (dropout): Dropout(p=0.1, inplace=False)\n)", "parameters": [["fc.weight", [32, 768]], ["fc.bias", [32]]], "output_shape": [[2, 32]], "num_parameters": [24576, 32]}, {"name": "gtrend_encoder", "id": 140286703332560, "class_name": "GTrendEmbedder(\n  (input_linear): TimeDistributed(\n    (module): Linear(in_features=3, out_features=64, bias=True)\n  )\n  (pos_embedding): PositionalEncoding(\n    (dropout): Dropout(p=0.1, inplace=False)\n  )\n  (encoder): TransformerEncoder(\n    (layers): ModuleList(\n      (0): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)\n        )\n        (linear1): Linear(in_features=64, out_features=2048, bias=True)\n        (dropout): Dropout(p=0.2, inplace=False)\n        (linear2): Linear(in_features=2048, out_features=64, bias=True)\n        (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.2, inplace=False)\n        (dropout2): Dropout(p=0.2, inplace=False)\n      )\n      (1): TransformerEncoderLayer(\n        (self_attn): MultiheadAttention(\n          (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)\n        )\n        (linear1): Linear(in_features=64, out_features=2048, bias=True)\n        (dropout): Dropout(p=0.2, inplace=False)\n        (linear2): Linear(in_features=2048, out_features=64, bias=True)\n        (norm1): LayerNorm((64,), eps=1e-05, elementwise_affine=True)\n        (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)\n        (dropout1): Dropout(p=0.2, inplace=False)\n        (dropout2): Dropout(p=0.2, inplace=False)\n      )\n    )\n  )\n)", "parameters": [["input_linear.module.weight", [64, 3]], ["input_linear.module.bias", [64]], ["encoder.layers.0.self_attn.in_proj_weight", [192, 64]], ["encoder.layers.0.self_attn.in_proj_bias", [192]], ["encoder.layers.0.self_attn.out_proj.weight", [64, 64]], ["encoder.layers.0.self_attn.out_proj.bias", [64]], ["encoder.layers.0.linear1.weight", [2048, 64]], ["encoder.layers.0.linear1.bias", [2048]], ["encoder.layers.0.linear2.weight", [64, 2048]], ["encoder.layers.0.linear2.bias", [64]], ["encoder.layers.0.norm1.weight", [64]], ["encoder.layers.0.norm1.bias", [64]], ["encoder.layers.0.norm2.weight", [64]], ["encoder.layers.0.norm2.bias", [64]], ["encoder.layers.1.self_attn.in_proj_weight", [192, 64]], ["encoder.layers.1.self_attn.in_proj_bias", [192]], ["encoder.layers.1.self_attn.out_proj.weight", [64, 64]], ["encoder.layers.1.self_attn.out_proj.bias", [64]], ["encoder.layers.1.linear1.weight", [2048, 64]], ["encoder.layers.1.linear1.bias", [2048]], ["encoder.layers.1.linear2.weight", [64, 2048]], ["encoder.layers.1.linear2.bias", [64]], ["encoder.layers.1.norm1.weight", [64]], ["encoder.layers.1.norm1.bias", [64]], ["encoder.layers.1.norm2.weight", [64]], ["encoder.layers.1.norm2.bias", [64]]], "output_shape": [[52, 2, 64]], "num_parameters": [192, 64, 12288, 192, 4096, 64, 131072, 2048, 131072, 64, 64, 64, 64, 64, 12288, 192, 4096, 64, 131072, 2048, 131072, 64, 64, 64, 64, 64]}, {"name": "static_feature_encoder", "id": 140286700820752, "class_name": "FusionNetwork(\n  (img_pool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (img_linear): Linear(in_features=2048, out_features=32, bias=True)\n  (feature_fusion): Sequential(\n    (0): BatchNorm1d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n    (1): Linear(in_features=96, out_features=96, bias=False)\n    (2): ReLU()\n    (3): Dropout(p=0.2, inplace=False)\n    (4): Linear(in_features=96, out_features=64, bias=True)\n  )\n)", "parameters": [["img_linear.weight", [32, 2048]], ["img_linear.bias", [32]], ["feature_fusion.0.weight", [96]], ["feature_fusion.0.bias", [96]], ["feature_fusion.1.weight", [96, 96]], ["feature_fusion.4.weight", [64, 96]], ["feature_fusion.4.bias", [64]]], "output_shape": [[2, 64]], "num_parameters": [65536, 32, 96, 96, 9216, 6144, 64]}, {"name": "decoder", "id": 140286649886672, "class_name": "TransformerDecoder(\n  (layers): ModuleList(\n    (0): TransformerDecoderLayer(\n      (multihead_attn): MultiheadAttention(\n        (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)\n      )\n      (linear1): Linear(in_features=64, out_features=256, bias=True)\n      (dropout): Dropout(p=0.1, inplace=False)\n      (linear2): Linear(in_features=256, out_features=64, bias=True)\n      (norm2): LayerNorm((64,), eps=1e-05, elementwise_affine=True)\n      (norm3): LayerNorm((64,), eps=1e-05, elementwise_affine=True)\n      (dropout2): Dropout(p=0.1, inplace=False)\n      (dropout3): Dropout(p=0.1, inplace=False)\n    )\n  )\n)", "parameters": [["layers.0.multihead_attn.in_proj_weight", [192, 64]], ["layers.0.multihead_attn.in_proj_bias", [192]], ["layers.0.multihead_attn.out_proj.weight", [64, 64]], ["layers.0.multihead_attn.out_proj.bias", [64]], ["layers.0.linear1.weight", [256, 64]], ["layers.0.linear1.bias", [256]], ["layers.0.linear2.weight", [64, 256]], ["layers.0.linear2.bias", [64]], ["layers.0.norm2.weight", [64]], ["layers.0.norm2.bias", [64]], ["layers.0.norm3.weight", [64]], ["layers.0.norm3.bias", [64]]], "output_shape": [[1, 2, 64], [2, 1, 52]], "num_parameters": [12288, 192, 4096, 64, 16384, 256, 16384, 64, 64, 64, 64, 64]}, {"name": "decoder_fc.0", "id": 140286713672336, "class_name": "Linear(in_features=64, out_features=12, bias=True)", "parameters": [["weight", [12, 64]], ["bias", [12]]], "output_shape": [[1, 2, 12]], "num_parameters": [768, 12]}, {"name": "decoder_fc.1", "id": 140286649888016, "class_name": "Dropout(p=0.2, inplace=False)", "parameters": [], "output_shape": [[1, 2, 12]], "num_parameters": []}], "edges": []}